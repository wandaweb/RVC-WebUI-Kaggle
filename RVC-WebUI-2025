{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# RVC WebUI\n\nHow-to video: https://youtu.be/SJUw6evAXbY  \nRepository: https://github.com/wandaweb/RVC-WebUI-Kaggle  \n    \nCheck out the original RVC project: https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI  \nand the WebUI repo: https://github.com/ddPn08/rvc-webui\n\nIf you want to help me dedicate more time to creating and updating notebooks like this one, consider joining on [Pateron](patreon.com/PogsCafe), or [Buy me a Coffee](https://ko-fi.com/pogscafe)! Get early previews of notebooks, videos, prompts, and end-of-video shoutouts as soon as we reach 10 members!","metadata":{}},{"cell_type":"markdown","source":"## Installation\nInstallation can take about 4 minutes the first time, and about 3 minutes in consecutive runs.","metadata":{}},{"cell_type":"code","source":"%%time\n#1\n\nimport os\nimport stat\n\nhome_dir = '/kaggle/working'\npython = '/kaggle/working/venv/bin/python'\npip = '/kaggle/working/venv/bin/pip'\n\ndef find_bin_folders(folder_path):\n    bin_folders = []\n    for root, dirs, files in os.walk(folder_path):\n        for dir_name in dirs:\n            if dir_name == 'bin':\n                bin_folders.append(os.path.join(root, dir_name)) \n    return bin_folders\n\ndef installLibraries(home_dir, python, pip):\n  %cd {home_dir}\n  !{pip} install --force-reinstall pip==24.0\n  !{pip} install --force-reinstall torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n  !wget https://q4j3.c11.e2-5.dev/downloads/rvc%2Fkaggle-req-rvc-june.txt -O req-rvc-webui.txt\n  !{pip} install ffmpeg-python\n  #!{pip} install --force-reinstall  -r req-rvc-webui.txt\n  #!cat /kaggle/working/rvc-webui/req-rvc-webui.txt | xargs -n 1 {pip} install    \n  !cat req-rvc-webui.txt | xargs -n 1 {pip} install  \n  !{pip} install torchsde==0.2.6\n  !{pip} install torchcrepe==0.0.24  \n\n!pip install virtualenv\n%cd /kaggle/working\n!git clone https://github.com/wandaweb/Retrieval-based-Voice-Conversion-WebUI\n%cd /kaggle/working\n%cd Retrieval-based-Voice-Conversion-WebUI\n!python download-models-for-kaggle.py\n%cd /kaggle/working\n!git clone https://github.com/wandaweb/rvc-webui\n%cd /kaggle/working/rvc-webui\n!git checkout dev\n\n    \nif not os.path.exists(f'{home_dir}/venv'):\n#if True:\n    print('installing venv')\n    os.chdir(home_dir)\n    get_ipython().system(f'cd {home_dir}')\n    \n    get_ipython().system('virtualenv venv -p $(which python3.10)')\n    installLibraries(home_dir, python, pip)\nelse:\n    bin_folders = find_bin_folders('/kaggle/working/venv')\n    if bin_folders:\n      print(\"Found 'bin' folders:\")\n      for bin_folder in bin_folders:\n        print(bin_folder)\n        for filename in os.listdir(bin_folder):\n            file_path = os.path.join(bin_folder, filename)\n            if os.path.isfile(file_path):\n                current_permissions = os.stat(file_path).st_mode\n                 # Add execute permissions for the user, group, and others\n                os.chmod(file_path, current_permissions | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n\nif not os.path.exists(f'{home_dir}/venv/bin/python3.10'):\n    get_ipython().system('cp /usr/bin/python3.10 /kaggle/working/venv/bin/')\n\nif not os.path.exists(f'/kaggle/working/venv/bin/python'):\n    get_ipython().system('ln -s /kaggle/working/venv/bin/python3.10 /kaggle/working/venv/bin/python')\nif not os.path.exists(f'/kaggle/working/venv/bin/python3'):\n    get_ipython().system('ln -s /kaggle/working/venv/bin/python3.10 /kaggle/working/venv/bin/python3')\n\n\n#!pip install launch\n\nimport fileinput\nimport os\n#import launch\n    \nos.environ[\"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION\"] = \"python\"\n\n#launch.prepare_environment()\nos.environ[\"PATH\"] = (\n        \"/kaggle/working/rvc-webui/bin\"\n        + os.pathsep\n        + os.environ.get(\"PATH\", \"\")\n    )\n\n\n%cd /kaggle/working\nif not os.path.exists(f\"/kaggle/working/linux-amd64-filebrowser.tar.gz\"):\n    get_ipython().system(\"wget https://github.com/filebrowser/filebrowser/releases/download/v2.27.0/linux-amd64-filebrowser.tar.gz\")\nif not os.path.exists(f\"/kaggle/working/filebrowser\"):   \n    get_ipython().system(\"tar xvfz linux-amd64-filebrowser.tar.gz\")\n!chmod a+x /kaggle/working/filebrowser\n!/kaggle/working/filebrowser config init > /dev/null\n!/kaggle/working/filebrowser config set --auth.method=noauth > /dev/null\n!/kaggle/working/filebrowser config set --branding.theme=dark > /dev/null\n!/kaggle/working/filebrowser users add admin admin \n!/kaggle/working/filebrowser config export \"/kaggle/working/config.json\"\n\nprint(\"\\nInstallation finished.\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Download a Song","metadata":{}},{"cell_type":"code","source":"# 3\n# Example: Download a song\n# The song I'm using in this example is Anything Can Happen (4:06) by Geoff Hurley\n# available on https://www.freemusicpublicdomain.com/royalty-free-ballads/\n!mkdir /kaggle/working/rvc-webui/song/\n!wget \"https://www.dropbox.com/s/6zg5sietcjit9lt/08%20-%20Geoff%20Hurley%20-%20Anything%20Can%20Happen.mp3?dl=1\" \\\n    -O \"/kaggle/working/rvc-webui/song/AnythingCanHappen.mp3\"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Split an audio file into vocal and instrumental tracks\nIf you have a song with background music and vocals, or if you have a voice recording with background noise, you can use this step to extract the vocals into a separate file.  \nChange the value of the UVR_FILE variable to point to the audio file you want to split.","metadata":{}},{"cell_type":"code","source":"# Extract voice\nos.environ[\"UVR_FILE\"] = \"/kaggle/working/rvc-webui/song/AnythingCanHappen.mp3\"\n\nos.environ[\"UVR_MODEL\"] = \"HP5_only_main_vocal\"\nos.environ[\"UVR_OUT\"] = \"opt\"\nos.environ[\"UVR_FORMAT\"] = \"wav\"\n\nos.environ[\"weight_uvr5_root\"] = \"/kaggle/working/Retrieval-based-Voice-Conversion-WebUI/assets/uvr5_weights\"\nos.environ[\"TEMP\"] = \"/tmp\"\n\n%cd /kaggle/working/Retrieval-based-Voice-Conversion-WebUI\n\n!{python} extract.py","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Run RVC WebUI","metadata":{}},{"cell_type":"markdown","source":"**Best Option: Start the Web UI with Gradio**  \n* Wait for the line that says \"Running on public URL:  ...\". It might take a minute for this line to show up at the end of the output.   \n* Click the gradio link to access the UI","metadata":{}},{"cell_type":"code","source":"%cd /kaggle/working/rvc-webui\n!{python} -c 'import sys; sys.path.append(\"/kaggle/working/rvc-webui\"); import launch; launch.start()'","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Option 1: Starting the Web UI Pinggy**  \n* Wait for the line that says \"Running on local URL:  http://127.0.0.1:7860\". It might take a minute for this line to show up at the end of the output.   \n* Click the link ending with pinggy.link between the smiling emojis\n* If your (training) code is still running when your link time runs out in an hour, wait for the training to complete, and re-run this code block to interact with the UI again","metadata":{}},{"cell_type":"code","source":"# Starting the Web UI with pinggy\n\nfrom multiprocessing import Process\nimport sys\nimport time\n\n%cd /kaggle/working/rvc-webui\n\nopen('log.txt', 'w').close()\n\ndef run_app():\n    cmd = f\"{python} -c 'import sys; sys.path.append(\\\"/kaggle/working/rvc-webui\\\"); import launch; launch.start()' & ssh -o StrictHostKeyChecking=no -p 80 -R0:localhost:7860 a.pinggy.io > log.txt\"\n    get_ipython().system(cmd)\n    \ndef print_url():\n    print(\"waiting for output\")\n    time.sleep(2)\n    sys.stdout.flush()\n    \n    found = False\n    with open('log.txt', 'r') as file:\n        end_word = '.pinggy.link'\n        for line in file:\n            #print(line)\n            start_index = line.find(\"http:\")\n            if start_index != -1:\n                end_index = line.find(end_word, start_index)\n                if end_index != -1:\n                    print(\"游때 游때 游때\")\n                    print(\"URL: \" + line[start_index:end_index + len(end_word)])\n                    print(\"游때 游때 游때\")\n                    found = True\n    if not found:\n        print_url()\n    else:\n        with open('log.txt', 'r') as file:\n            for line in file:\n                print(line)\n    \np_app = Process(target=run_app)\np_url = Process(target=print_url)\np_app.start()\np_url.start()\np_app.join()\np_url.join()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Option 2: Starting the Web UI with ngrok**  \n* Make sure to put your ngrok token in the Ngrok_token variable. The token can be obtained from https://ngrok.com\n* If you have a static domain, put your ngrok domain in the Ngrok_domain variable.\n* Wait for the line that says \"Running on local URL:  http://127.0.0.1:7860\" \n* Visit your ngrok URL (either your static domain, or the ngrok url displayed in the output)","metadata":{}},{"cell_type":"code","source":"# Starting the Web UI with ngrok\n\n# --- Variables ---\n\nNgrok_token = \"\" \n# Put your ngrok token here (obtainable from https://ngrok.com)\n# Example: Ngrok_token = \"2Fw13n4GcJT12g7mSDUC62cdNGb_5svdjf3Gg5vfhr4nGr5gF\"\n\nNgrok_domain = \"\" # optional, leave empty if you don't have a domain\n\nport = 7860\n\n# -----------------\n\n\n!pip install pyngrok\n\ncode = \"import launch; launch.start()\"\n\nfrom pyngrok import ngrok, conf\nimport fileinput\nimport sys\nimport gc\n\ngc.collect()\n\nif Ngrok_token!=\"\":\n  ngrok.kill()\n  srv=ngrok.connect(port , pyngrok_config=conf.PyngrokConfig(auth_token=Ngrok_token),\n                    bind_tls=True, domain=Ngrok_domain).public_url\n  print(\"\\n游때* Your URL is: *游때\")\n  print(srv)\n  print (\"游때****************游때\\n\")\n  get_ipython().system(f\"python  -c '{code}'\")\nelse:\n  print('An ngrok token is required. You can get one on https://ngrok.com and paste it into the ngrok_token field.')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Option 3: Starting the Web UI with Zrok**  ","metadata":{}},{"cell_type":"markdown","source":"### Install Zrok","metadata":{}},{"cell_type":"code","source":"# Install Zrok (only needs to run once)\n\n!mkdir /kaggle/working/zrok\n%cd /kaggle/working/zrok\n!wget https://github.com/openziti/zrok/releases/download/v1.0.4/zrok_1.0.4_linux_amd64.tar.gz\n!tar -xvf ./zrok*.gz \n!chmod a+x /kaggle/working/zrok/zrok ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Sign up for a Zrok account","metadata":{}},{"cell_type":"code","source":"email = '####@gmail.com' # replace with your email\n\n# --------------\n\ncmd = '/kaggle/working/zrok/zrok invite'\nlog = '/kaggle/working/zrok/log.txt'\n\n!pip install pexpect\n!touch $log\n\nimport pexpect\nimport time\nchild = pexpect.spawn('bash')\nchild.sendline(f'{cmd} | tee {log}')\nchild.expect('enter and confirm your email address...')\ntime.sleep(1); child.sendline(email); time.sleep(1); child.send(chr(9)); time.sleep(1)\nchild.sendline(email); time.sleep(1); child.send('\\n'); time.sleep(1); child.send(chr(9))\ntime.sleep(1); child.send('\\r\\n'); time.sleep(2); child.close()\n!cat $log\n!rm $log","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Enable Zrok for this notebook","metadata":{}},{"cell_type":"code","source":"# Enable Zrok (needs to run once per instance)\n# Paste your Zrok token in the token variable\n\ntoken = \"\"\n!chmod a+x /kaggle/working/zrok/zrok \n!/kaggle/working/zrok/zrok enable $token","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Start the WebUI with Zrok","metadata":{}},{"cell_type":"code","source":"# Start the WebUI with Zrok\n%cd /kaggle/working/rvc-webui\ncommand = f\"{python} -c 'import sys; sys.path.append(\\\"/kaggle/working/rvc-webui\\\"); import launch; launch.start()'\"\n\nport = '7860'\n# ------------------------\n\n!chmod a+x /kaggle/working/zrok/zrok \ncmd = f'{command} & /kaggle/working/zrok/zrok share public http://localhost:{port} --headless'\nget_ipython().system(cmd)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Run FileBrowser ","metadata":{}},{"cell_type":"code","source":"# Install FileBrowser\n%cd /kaggle/working\n!rm -rf  /kaggle/working/filebrowser\n!rm -rf linux-amd64-filebrowser.tar.gz\n!wget https://github.com/filebrowser/filebrowser/releases/download/v2.32.0/linux-amd64-filebrowser.tar.gz\n!tar xvfz linux-amd64-filebrowser.tar.gz\n!chmod a+x filebrowser\n!rm /kaggle/working/config.json\n!/kaggle/working/filebrowser config init > /dev/null\n!/kaggle/working/filebrowser config set --auth.method=noauth > /dev/null\n!/kaggle/working/filebrowser config set --branding.theme=dark > /dev/null\n!/kaggle/working/filebrowser users add admin admin > /dev/null\nprint('\\nFileBrowser installed.')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Run FileBrowser","metadata":{}},{"cell_type":"code","source":"%cd /kaggle/working\n!chmod a+x /kaggle/working/filebrowser\n        \nfrom multiprocessing import Process\nimport sys\nimport time\n\nopen('log.txt', 'w').close()\n\ndef run_app():\n    !/kaggle/working/filebrowser -c \"/kaggle/working/config.json\" & ssh -o StrictHostKeyChecking=no -p 80 -R0:localhost:8080 a.pinggy.io > log.txt > log.txt\n    \ndef print_url():\n    print(\"waiting for output\")\n    time.sleep(2)\n    sys.stdout.flush()\n    \n    found = False\n    with open('log.txt', 'r') as file:\n        end_word = '.pinggy.link'\n        for line in file:\n            start_index = line.find(\"http:\")\n            if start_index != -1:\n                end_index = line.find(end_word, start_index)\n                if end_index != -1:\n                    print(\"游때 游때 游때\")\n                    print(\"URL: \" + line[start_index:end_index + len(end_word)])\n                    print(\"游때 游때 游때\")\n                    found = True\n    if not found:\n        print_url()\n    else:\n        with open('log.txt', 'r') as file:\n            for line in file:\n                print(line)\n    \np_app = Process(target=run_app)\np_url = Process(target=print_url)\np_app.start()\np_url.start()\np_app.join()\np_url.join()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Download a model","metadata":{}},{"cell_type":"code","source":"pth_url = \"https://huggingface.co/sail-rvc/SpongeBob_SquarePants__RVC_v2_/resolve/main/model.pth?download=true\"\nindex_url = \"https://huggingface.co/sail-rvc/SpongeBob_SquarePants__RVC_v2_/resolve/main/model.index?download=true\"\nname = \"spongebob\"\n\n\nget_ipython().system(f'wget \"{pth_url}\" -O \"/kaggle/working/rvc-webui/models/checkpoints/{name}.pth\"')\nindex_folder = f'/kaggle/working/rvc-webui/models/checkpoints/{name}_index'\nget_ipython().system(f'mkdir \"{index_folder}\"')\nget_ipython().system(f'wget \"{index_url}\" -O \"{index_folder}/{name}.index\"')\n\nprint(\"Finished downloading.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Merge two audio tracks (warning: this sometimes crashes the runtime - make sure to save your outputs first)","metadata":{}},{"cell_type":"code","source":"audio1 = \"/kaggle/working/rvc-webui/outputs/2-spongebob-vocal_AnythingCanHappen.mp3_10.wav\"\naudio2 = \"/kaggle/working/Retrieval-based-Voice-Conversion-WebUI/opt/instrument_AnythingCanHappen.mp3_10.wav\"\n\nout = \"/kaggle/working/audio-out/spongebob.wav\"\n\n!ls -la $audio1\n!ls -la $audio2\n\n!mkdir /kaggle/working/audio-out\n\n!ffmpeg -y -hwaccel cuda -hwaccel_output_format cuda -i $audio1 -i $audio2 -c:v copy -filter_complex \"[0:a][1:a] amix=inputs=2:duration=longest\" $out","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Delete checkpoints\nDelete all trained models to free up space.","metadata":{}},{"cell_type":"code","source":"!rm -rf /kaggle/working/rvc-webui/models/checkpoints/*\n!rm -rf /kaggle/working/rvc-webui/models/training/models/*","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Delete everything in /kaggle/working\nUseful if you want to run a clean installation or free up space without manually deleting models you no longer need. Make sure to download your outputs first!","metadata":{}},{"cell_type":"code","source":"!rm -rf /kaggle/working/*","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}